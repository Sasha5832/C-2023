namespace Hrypas3
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            DzewoBinarne w1 = new DzewoBinarne(5);
            w1.Add2(8);
            w1.Add2(4);
            w1.Add2(3);
            w1.Add2(4);
            w1.Add2(7);
            w1.Add2(6);
            w1.WyswietlWartosciMessageBox();
        }
        class Węzel3
        {
            public int wartosc;
            public Węzel3 rodzic;
            public Węzel3 lewedziecko;
            public Węzel3 prawedziecko;
            public Węzel3(int liczba)
            {
                this.wartosc = liczba;
            }

            public void Add2(int liczba)
            {
                var dziecko = new Węzel3(liczba);
                dziecko.rodzic = this;
                if (liczba < this.wartosc)
                {
                    this.lewedziecko = dziecko;
                }
                else
                {
                    this.prawedziecko = dziecko;
                }
            }
        }
        class DzewoBinarne
        {
            public Węzel3 korzen;
            public int liczbawenzld;
            public DzewoBinarne(int liczba)
            {
                this.korzen = new(liczba);
                this.liczbawenzld = 1;
            }
            public void Add(int liczba)
            {
                DodajRekurencyjnie(this.korzen, liczba);
            }

            public void Add2(int liczba)
            {
                Węzel3 rodzic = this.ZnadzRodzica(liczba);
                rodzic.Add2(liczba);
            }

            public Węzel3 ZnadzRodzica(int liczba)
            {
                var w = this.korzen;
                while (true)
                {
                    if (liczba < w.wartosc)
                    {
                        if(w.lewedziecko == null)
                        {
                            return w;
                        }
                        else
                        {
                            w = w.lewedziecko;
                        }
                    }
                    else
                    {
                        if (w.prawedziecko == null)
                        {
                            return w;
                        }
                        else
                        {
                            w = w.prawedziecko;
                        }
                    }
                }
            }













            private void DodajRekurencyjnie(Węzel3 aktualny, int liczba)
            {
                if (liczba < aktualny.wartosc)
                {
                    if (aktualny.lewedziecko == null)
                    {
                        aktualny.lewedziecko = new Węzel3(liczba);
                        aktualny.lewedziecko.rodzic = aktualny;
                        this.liczbawenzld++;
                    }
                    else
                    {
                        DodajRekurencyjnie(aktualny.lewedziecko, liczba);
                    }
                }
                else
                {
                    if (aktualny.prawedziecko == null)
                    {
                        aktualny.prawedziecko = new Węzel3(liczba);
                        aktualny.prawedziecko.rodzic = aktualny;
                        this.liczbawenzld++;
                    }
                    else
                    {
                        DodajRekurencyjnie(aktualny.prawedziecko, liczba);
                    }
                }
            }
            public void WyswietlWartosciMessageBox()
            {
                WyswietlWartosciMessageBoxRekurencyjnie(this.korzen);
            }

            private void WyswietlWartosciMessageBoxRekurencyjnie(Węzel3 aktualny)
            {
                if (aktualny != null)
                {
                    MessageBox.Show(aktualny.wartosc.ToString(), "Dodany węzeł");
                    WyswietlWartosciMessageBoxRekurencyjnie(aktualny.lewedziecko);
                    WyswietlWartosciMessageBoxRekurencyjnie(aktualny.prawedziecko);
                }
            }
        }
    }
}
