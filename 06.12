using System.Resources;

namespace Hrypas3
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            int wynik;
            DzewoBinarne w1 = new DzewoBinarne(5);
            w1.Add2(4);
            w1.Add2(2);
            w1.Add2(3);
            w1.Add2(8);
            w1.Add2(7);
            w1.Add2(9);
            w1.Add2(6);
            //w1.WyswietlWartosciMessageBox();
            MessageBox.Show(w1.Nastepnik(w1.Znajdz(8)).ToString());
            MessageBox.Show(w1.Poprzednik(w1.Znajdz(5)).ToString());
        }
        class Węzel3
        {
            public int wartosc;
            public Węzel3 rodzic;
            public Węzel3 lewedziecko;
            public Węzel3 prawedziecko;
            public Węzel3(int liczba)
            {
                this.wartosc = liczba;
            }

            public override string ToString()
            {
                return this.wartosc.ToString();
            }

            public void Add2(int liczba)
            {
                var dziecko = new Węzel3(liczba);
                dziecko.rodzic = this;
                if (liczba < this.wartosc)
                {
                    this.lewedziecko = dziecko;
                }
                else
                {
                    this.prawedziecko = dziecko;
                }
            }
        }
        class DzewoBinarne
        {
            public Węzel3 korzen;
            public int liczbawenzld;
            public DzewoBinarne(int liczba)
            {
                this.korzen = new(liczba);
                this.liczbawenzld = 1;
            }
            public void Add(int liczba)
            {
                DodajRekurencyjnie(this.korzen, liczba);
            }

            public void Add2(int liczba)
            {
                Węzel3 rodzic = this.ZnadzRodzica(liczba);
                rodzic.Add2(liczba);
            }

            public Węzel3 ZnadzRodzica(int liczba)
            {
                var w = this.korzen;
                while (true)
                {
                    if (liczba < w.wartosc)
                    {
                        if(w.lewedziecko == null)
                        {
                            return w;
                        }
                        else
                        {
                            w = w.lewedziecko;
                        }
                    }
                    else
                    {
                        if (w.prawedziecko == null)
                        {
                            return w;
                        }
                        else
                        {
                            w = w.prawedziecko;
                        }
                    }
                }
            }
            /*     ZADANIE DOMOWE
            Węzel3 Znajdz(int liczba)
            {
                //znajdz wenel jezeli nie ma to return null
            }
            Węzel3 ZnajdzMin(Węzel3 w)
            {
                // w lewo na maksa
            }
            Węzel3 ZnajdzMax(Węzel3 w)
            {
                // w prawo na maksa
            }
            Węzel3 Nastepnik(Węzel3 w)
            {
                // 3 bo 3 to min potem 4 z góry potem 4 z dolu potem 5 potem 6 potem 7 potem 8 
                // a) jezeli jest prawe dziecko to uzyj ZnajdzMin
                // ZnajdzMin(w.praweDziecko)
                // b) jezeli nie ma prawego dziecka idz do gory az wyjdziesz jako lewe dziecko rodziva, Nastepnik to rodzic
                // c) jezeli nie ma prawego dziecka, i idąnc do gory nie ma (2) dwujki to nie ma Nastepnika
            }
            Węzel3 Poprzednik(Węzel3 w)
            {
                odwrotnie do Nastepnika
            }
            */
            public Węzel3 Znajdz(int liczba)
            {
                return ZnajdzRekurencyjnie(this.korzen, liczba);
            }
            private Węzel3 ZnajdzRekurencyjnie(Węzel3 aktualny, int liczba)
            {
                if (aktualny == null || aktualny.wartosc == liczba)
                {
                    return aktualny;
                }

                if (liczba < aktualny.wartosc)
                {
                    return ZnajdzRekurencyjnie(aktualny.lewedziecko, liczba);
                }
                else
                {
                    return ZnajdzRekurencyjnie(aktualny.prawedziecko, liczba);
                }
            }
            public Węzel3 ZnajdzMin(Węzel3 w)
            {
                while (w.lewedziecko != null)
                {
                    w = w.lewedziecko;
                }
                return w;
            }
            public Węzel3 Usun(Węzel3 w)
            {
                //1) nie ma dzieci , odwiązujemy w3 rodzic = null, w2 dziecko == null
                //2) jest jedno dziecko - zapisujemo dziecko jak dziecko dzadka (dziecko zastepuje rodzica)
                //3) 2 dzieci skozystacz z nastepnika oraz poprzednika
                return null;
            }

            public Węzel3 ZnajdzMax(Węzel3 w)
            {
                while (w.prawedziecko != null)
                {
                    w = w.prawedziecko;
                }
                return w;
            }
            public Węzel3 Nastepnik(Węzel3 w)
            {
                if (w.prawedziecko != null)
                {
                    return this.ZnajdzMin(w.prawedziecko);
                }
                while (w.rodzic != null)
                {
                    if (w.rodzic.lewedziecko == w){
                        return w.rodzic;
                    }
                    w = w.rodzic;
                }
                return null;
            }
            public Węzel3 Poprzednik(Węzel3 w)
            {
                if (w.lewedziecko != null)
                {
                    return this.ZnajdzMax(w.lewedziecko);
                }
                while (w.rodzic != null)
                {
                    if (w.rodzic.prawedziecko == w)
                    {
                        return w.rodzic;
                    }
                    w = w.rodzic;
                }
                return null;
            }


            private void DodajRekurencyjnie(Węzel3 aktualny, int liczba)
            {
                if (liczba < aktualny.wartosc)
                {
                    if (aktualny.lewedziecko == null)
                    {
                        aktualny.lewedziecko = new Węzel3(liczba);
                        aktualny.lewedziecko.rodzic = aktualny;
                        this.liczbawenzld++;
                    }
                    else
                    {
                        DodajRekurencyjnie(aktualny.lewedziecko, liczba);
                    }
                }
                else
                {
                    if (aktualny.prawedziecko == null)
                    {
                        aktualny.prawedziecko = new Węzel3(liczba);
                        aktualny.prawedziecko.rodzic = aktualny;
                        this.liczbawenzld++;
                    }
                    else
                    {
                        DodajRekurencyjnie(aktualny.prawedziecko, liczba);
                    }
                }
            }
            public void WyswietlWartosciMessageBox()
            {
                WyswietlWartosciMessageBoxRekurencyjnie(this.korzen);
            }

            private void WyswietlWartosciMessageBoxRekurencyjnie(Węzel3 aktualny)
            {
                if (aktualny != null)
                {
                    MessageBox.Show(aktualny.wartosc.ToString(), "Dodany węzeł");
                    WyswietlWartosciMessageBoxRekurencyjnie(aktualny.lewedziecko);
                    WyswietlWartosciMessageBoxRekurencyjnie(aktualny.prawedziecko);
                }
            }
        }
    }
}
