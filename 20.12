using System.Resources;

namespace Hrypas3
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            int wynik;
            DzewoBinarne w1 = new DzewoBinarne(4);
            w1.Add2(6);
            w1.Add2(5);
            w1.Add2(0);
            w1.Add2(2);
            w1.Add2(7);
            w1.Add2(1);
            w1.Add2(3);
            w1.WyswietlWartosciMessageBox();
            //MessageBox.Show(w1.Nastepnik(w1.Znajdz(8)).ToString());
            //MessageBox.Show(w1.Poprzednik(w1.Znajdz(5)).ToString());

        }
        class Graf
        {
            public int[] listaWęzalów = {};
            public int[] listaKrawędzi = {};
            public int Sprawdz(Krawedzi k)
            {
                int wynik = 0;
                if (!this.listaWęzalów.Contains(k.początek)){
                    wynik++;
                }
                wynik++;
                return wynik;
            }
            public Graf(Krawedzi k)
            {
                this.listaKrawędzi
            }
            public Graf czyPonownie = null;
            public Graf Kruskala(Krawedzi k, Graf g)
            {
                var krawedzie = this.listaKrawędzi.OrderBy(k=>k.waga);
                var grafy = new List<Graf>();
                foreach(var k in krawedzie)
                {
                    if(grafy.Count==0)
                    {
                        grafy.Add(new Graf(k));
                        continue;
                    }
                    for(int i =0; i<grafy.Count; i++)
                    {
                        var ileNowychWezlow = g.Sprawdz(k);
                        if (ileNowychWezlow == 0)
                        { 

                        }
                        else if(ileNowychWezlow == 1)
                        {
                            if (czyPonownie == null)
                            {
                                g.Add(k);
                                czyPonownie = g;
                            }
                            else
                            {
                                czyPonownie.Join(g);
                                grafy.RemoveAt(i);
                                break;
                            }
                        }
                    }
                }
                
            }
        }

        class Węzel4
        {
            public int wartość;
            public int listaKrawędzi;
            public Węzel4(int liczba)
            {
                this.wartość = liczba;
            }
        }
        class Krawedzi
        {

            public int waga;
            public int początek;
            public int koniec;
            public Krawedzi(int liczba)
            {
                this.waga = liczba;
            }
        }







        class Węzel3
        {
            public int wartosc;
            public Węzel3 rodzic;
            public Węzel3 lewedziecko;
            public Węzel3 prawedziecko;
            public Węzel3(int liczba)
            {
                this.wartosc = liczba;
            }

            public override string ToString()
            {
                return this.wartosc.ToString();
            }

            public void Add2(int liczba)
            {
                var dziecko = new Węzel3(liczba);
                dziecko.rodzic = this;
                if (liczba < this.wartosc)
                {
                    this.lewedziecko = dziecko;
                }
                else
                {
                    this.prawedziecko = dziecko;
                }
            }
        }
        class DzewoBinarne
        {
            public Węzel3 korzen;
            public int liczbawenzld;
            public DzewoBinarne(int liczba)
            {
                this.korzen = new(liczba);
                this.liczbawenzld = 1;
            }
            public void Add(int liczba)
            {
                DodajRekurencyjnie(this.korzen, liczba);
            }

            public void Add2(int liczba)
            {
                Węzel3 rodzic = this.ZnadzRodzica(liczba);
                rodzic.Add2(liczba);
            }

            public Węzel3 ZnadzRodzica(int liczba)
            {
                var w = this.korzen;
                while (true)
                {
                    if (liczba < w.wartosc)
                    {
                        if(w.lewedziecko == null)
                        {
                            return w;
                        }
                        else
                        {
                            w = w.lewedziecko;
                        }
                    }
                    else
                    {
                        if (w.prawedziecko == null)
                        {
                            return w;
                        }
                        else
                        {
                            w = w.prawedziecko;
                        }
                    }
                }
            }
            public Węzel3 Znajdz(int liczba)
            {
                return ZnajdzRekurencyjnie(this.korzen, liczba);
            }
            private Węzel3 ZnajdzRekurencyjnie(Węzel3 aktualny, int liczba)
            {
                if (aktualny == null || aktualny.wartosc == liczba)
                {
                    return aktualny;
                }

                if (liczba < aktualny.wartosc)
                {
                    return ZnajdzRekurencyjnie(aktualny.lewedziecko, liczba);
                }
                else
                {
                    return ZnajdzRekurencyjnie(aktualny.prawedziecko, liczba);
                }
            }
            public Węzel3 ZnajdzMin(Węzel3 w)
            {
                while (w.lewedziecko != null)
                {
                    w = w.lewedziecko;
                }
                return w;
            }
            public Węzel3 Usun(Węzel3 w)
            {
                if (w == null)
                    return null;

                // Przypadek 1: Węzeł nie ma dzieci
                if (w.lewedziecko == null && w.prawedziecko == null)
                {
                    if (w.rodzic != null)
                    {
                        if (w.rodzic.lewedziecko == w)
                            w.rodzic.lewedziecko = null;
                        else
                            w.rodzic.prawedziecko = null;
                    }
                    else
                    {
                        // Usuwamy korzeń
                        this.korzen = null;
                    }
                }
                // Przypadek 2: Węzeł ma jedno dziecko
                else if (w.lewedziecko == null)
                {
                    ZamienWęzeł(w, w.prawedziecko);
                }
                else if (w.prawedziecko == null)
                {
                    ZamienWęzeł(w, w.lewedziecko);
                }
                // Przypadek 3: Węzeł ma dwoje dzieci
                else
                {
                    Węzel3 nastepnik = this.ZnajdzMin(w.prawedziecko);
                    w.wartosc = nastepnik.wartosc;
                    Usun(nastepnik);
                }

                return w;
            }

            private void ZamienWęzeł(Węzel3 stary, Węzel3 nowy)
            {
                if (stary.rodzic != null)
                {
                    if (stary.rodzic.lewedziecko == stary)
                        stary.rodzic.lewedziecko = nowy;
                    else
                        stary.rodzic.prawedziecko = nowy;
                }
                else
                {
                    this.korzen = nowy;
                }

                if (nowy != null)
                {
                    nowy.rodzic = stary.rodzic;
                }
            }

            public Węzel3 ZnajdzMax(Węzel3 w)
            {
                while (w.prawedziecko != null)
                {
                    w = w.prawedziecko;
                }
                return w;
            }
            public Węzel3 Nastepnik(Węzel3 w)
            {
                if (w.prawedziecko != null)
                {
                    return this.ZnajdzMin(w.prawedziecko);
                }
                while (w.rodzic != null)
                {
                    if (w.rodzic.lewedziecko == w){
                        return w.rodzic;
                    }
                    w = w.rodzic;
                }
                return null;
            }
            public Węzel3 Poprzednik(Węzel3 w)
            {
                if (w.lewedziecko != null)
                {
                    return this.ZnajdzMax(w.lewedziecko);
                }
                while (w.rodzic != null)
                {
                    if (w.rodzic.prawedziecko == w)
                    {
                        return w.rodzic;
                    }
                    w = w.rodzic;
                }
                return null;
            }


            private void DodajRekurencyjnie(Węzel3 aktualny, int liczba)
            {
                if (liczba < aktualny.wartosc)
                {
                    if (aktualny.lewedziecko == null)
                    {
                        aktualny.lewedziecko = new Węzel3(liczba);
                        aktualny.lewedziecko.rodzic = aktualny;
                        this.liczbawenzld++;
                    }
                    else
                    {
                        DodajRekurencyjnie(aktualny.lewedziecko, liczba);
                    }
                }
                else
                {
                    if (aktualny.prawedziecko == null)
                    {
                        aktualny.prawedziecko = new Węzel3(liczba);
                        aktualny.prawedziecko.rodzic = aktualny;
                        this.liczbawenzld++;
                    }
                    else
                    {
                        DodajRekurencyjnie(aktualny.prawedziecko, liczba);
                    }
                }
            }
            public void WyswietlWartosciMessageBox()
            {
                WyswietlWartosciMessageBoxRekurencyjnie(this.korzen);
            }

            private void WyswietlWartosciMessageBoxRekurencyjnie(Węzel3 aktualny)
            {
                if (aktualny != null)
                {
                    MessageBox.Show(aktualny.wartosc.ToString(), "Dodany węzeł");
                    WyswietlWartosciMessageBoxRekurencyjnie(aktualny.lewedziecko);
                    WyswietlWartosciMessageBoxRekurencyjnie(aktualny.prawedziecko);
                }
            }
        }
    }
}
